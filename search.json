[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Genomic Coverage from Whole Genome Bisulfite Sequencing Data",
    "section": "",
    "text": "Description\nDNA sequencing is a common practice in biomedical research. The sequencing process requires collecting DNA from a sample (e.g., a tumor biopsy or a healthy tissue nearby), extracting the DNA from the cells, and then fragmenting the full length DNA strands into smaller chunks. These chunks are then placed on a “sequencer,” where the individual bases are read from the DNA fragments. The output from the sequencer is called a “read” and is then aligned back to a reference genome (the human reference genome is about three billion bases long) in order to find where the small fragment (usually around 100-150 bases in length) came from.\nOne possible analysis that can be done is to find the “coverage” across the entire genome. To do this, you count the total number of reads that cover each individual loci, or base, in the genome. One example of performing this analysis is as a part of a quality control pipeline within BISCUIT to verify a sequencing experiment consistently covered the entire genome. Currently, the pipeline uses bedtools to do this, but it is a slow process. One option for improving the speed of this process would be to use mosdepth, a tool specifically designed for finding coverages. However, it does not calculate the exact metrics needed in the BISCUIT quality control pipeline.\nThis project improves upon the existing bedtools implementation by calculating the needed metrics on the fly and utilizing parallelization during processing. The tool is written in C for plugging in to BISCUIT following its completion.\n\n\nDeliverables\n\nArtifacts\n\nSystem request\nDiagrams (use case, activity, etc.)\n\nDocuments\n\nProject proposal\nSoftware Requirements Specification\n\nMeeting Minutes\n\n30 September 2024\n07 October 2024"
  },
  {
    "objectID": "website/diagrams.html",
    "href": "website/diagrams.html",
    "title": "Diagrams",
    "section": "",
    "text": "Use Case Diagrams\n\n\n\nUse Case Diagram 1: Command Line Interface\n\n\n\n\n\nUse Case Diagram 2: Processing\n\n\n\n\nActivity Diagrams\n\n\n\nActivity Diagram 1: Command Line Interface\n\n\n\n\n\nActivity Diagram 2: Command Line Interface",
    "crumbs": [
      "Artifacts",
      "Diagrams (Use Case, Activity)"
    ]
  },
  {
    "objectID": "website/meetings.html",
    "href": "website/meetings.html",
    "title": "Meeting Minutes",
    "section": "",
    "text": "Collected Project Meeting Minutes\n\n30 September 2024\n07 October 2024",
    "crumbs": [
      "Meetings",
      "Meeting Minutes"
    ]
  },
  {
    "objectID": "meetings/GVSU-CIS641-PackingTheBits-2024-10-07.html",
    "href": "meetings/GVSU-CIS641-PackingTheBits-2024-10-07.html",
    "title": "WGBS Genome Coverage",
    "section": "",
    "text": "Team name: Packing the Bits\nMembers present: Jacob Morrison\nDate: 07 October 2024\nTime: 13:10\nDiscussion points:\n\nUse case diagrams created (IC2)\nActivity diagrams created (IC2)\nRequirements started (HW3, in progress)\nSome data that needs to be collected\n\nCoverage at each base in region\nWhether a read covers a base or not\n\nSome data structures\n\nNeed a data structure for passing shared information to each thread\nNeed an array for storing coverages in each region\n\n\nGoals for next week (include responsibilities):\nAll responsibilities handled by Jacob Morrison\n\nFinish requirements specification\nBegin implementation\nCreate presentation for midterm",
    "crumbs": [
      "Meetings",
      "2024-10-07"
    ]
  },
  {
    "objectID": "meetings/GVSU-CIS641-PackingTheBits-2024-10-07.html#meeting-minutes",
    "href": "meetings/GVSU-CIS641-PackingTheBits-2024-10-07.html#meeting-minutes",
    "title": "WGBS Genome Coverage",
    "section": "",
    "text": "Team name: Packing the Bits\nMembers present: Jacob Morrison\nDate: 07 October 2024\nTime: 13:10\nDiscussion points:\n\nUse case diagrams created (IC2)\nActivity diagrams created (IC2)\nRequirements started (HW3, in progress)\nSome data that needs to be collected\n\nCoverage at each base in region\nWhether a read covers a base or not\n\nSome data structures\n\nNeed a data structure for passing shared information to each thread\nNeed an array for storing coverages in each region\n\n\nGoals for next week (include responsibilities):\nAll responsibilities handled by Jacob Morrison\n\nFinish requirements specification\nBegin implementation\nCreate presentation for midterm",
    "crumbs": [
      "Meetings",
      "2024-10-07"
    ]
  },
  {
    "objectID": "artifacts/system_request.html",
    "href": "artifacts/system_request.html",
    "title": "Request Creator",
    "section": "",
    "text": "Request Creator\n\nJacob Morrison\n\n\n\nProject Sponsor\nDr. Erik Fredericks\n\n\nBusiness Need\nThis project exists to improve the efficiency of quality control of DNA sequencing experiments by merging multiple steps of the process into a single executable.\n\n\nBusiness Requirements\n\nMerge coverage determination and statistical calculations\nUse multithreading to improve efficiency\nIntegrate process within existing toolkit\n\n\n\nBusiness Value\nI expect this project will reduce the time it takes to run the full quality control script, thereby decreasing the time it takes to complete the initial analysis. Further, this reduction in time will benefit clinical users, who often work in environments with limited resources and tight timelines.\n\n\nSpecial Issues or Constraints\n\nProject will be as a standalone tool before being integrated into existing toolkit\nPotential issue: Merging data from individual threads\nPotential issue: Allowing user to process a subset of data",
    "crumbs": [
      "Artifacts",
      "System Request"
    ]
  },
  {
    "objectID": "docs/project-proposal.html",
    "href": "docs/project-proposal.html",
    "title": "Introduction",
    "section": "",
    "text": "Team name: Packing the Bits\nTeam members: Jacob Morrison\n\nIntroduction\nDNA sequencing is a common practice in biomedical research. The sequencing process requires collecting DNA from a sample (e.g., a tumor biopsy or a healthy tissue nearby), extracting the DNA from the cells, and then fragmenting the full length DNA strands into smaller chunks. These chunks are then placed on a “sequencer,” where the individual bases are read from the DNA fragments. The output from the sequencer is called a “read” and is then aligned back to a reference genome (the human reference genome is about three billion bases long) in order to find where the small fragment (usually around 100-150 bases in length) came from.\nOne possible analysis that can be done is to find the “coverage” across the entire genome. To do this, you count the total number of reads that cover each individual loci, or base, in the genome. One example of performing this analysis is as a part of a quality control pipeline within BISCUIT (a project I maintain for work) to verify a sequencing experiment consistently covered the entire genome. Currently, the pipeline uses bedtools to do this, but it is a slow process. One option for improving the speed of this process would be to use mosdepth, a tool specifically designed for finding coverages. However, it does not calculate the exact metrics that I need.\nI propose writing a small tool that improves upon the existing bedtools implementation and calculates the metrics I need on the fly. The tool will be written in C for plugging in to BISCUIT following the completion of class. It will also be multithreaded to improve the efficiency of the single-threaded bedtools option. Depending on the final state of the project, it may be sufficient to warrant an academic publication (either as a pre-print or a peer-reviewed application note).\n\n\nAnticipated Technologies\n\nOS: macOS or Linux\nEditor: vim\nLanguage: C\nThird-Party Libraries:\n\nhtslib\nPOSIX threads\nzlib\n\n\n\n\nMethod/Approach\nBroadly, I plan to start off with doing as much analysis and design ahead of time as I can. This will include defining as many requirements at the outset of the project (although I anticipate having to revise these during the implementation stage). I plan to give myself the most time on the implementation stage, with an approximately equal amount of time for analysis, design, and implementation. Testing will have a shorter amount of dedicated time; however, I plan to write some of the tests during the implementation stage. For the sake of this project, most of my tests will focus on the output of the tool to ensure it returns the same values as before. I will include some unit tests on some of the smaller functionality, but these won’t be the focus of my tests.\n\n\nEstimated Timeline\n\n\n\nTask\nEstimated Completion Date\n\n\n\n\nAnalysis\n30 September 2024\n\n\nDesign\n14 October 2024\n\n\nRequirements\n14 October 2024\n\n\nImplementation\n14 November 2024\n\n\nTesting\n31 November 2024\n\n\nWrapping Up\n6 December 2024\n\n\n\n\n\nAnticipated Problems\nPotential problems include, but are not limited to:\n\nDesign\n\nCreating class diagrams\n\nImplementation\n\nHandling reads that span adjacent regions handled by different threads\nMerging regions of similar coverage that span adjacent regions\nHandling regions of interest to calculate metrics for\n\nTesting\n\nUnit testing",
    "crumbs": [
      "Documents",
      "Project Proposal"
    ]
  },
  {
    "objectID": "docs/software_requirements_specification.html",
    "href": "docs/software_requirements_specification.html",
    "title": "Overview",
    "section": "",
    "text": "Overview\nThis document servers as the software requirements specification for the GVSU CIS 641 full semester project. Both functional and non-functional requirements are described.\n\n\nAbbreviation Definitions\n\nSAM file: Sequence Alignment Map file\nBAM file: Binary Alignment Map file\nBED file: Browser Extensible Data file\nCIGAR string: Compact Idiosyncratic Gapped Alignment Report string\n\n\n\nFunctional Requirements\n\nCommand Line Interface Requirements\n\nThe command line interface shall accept an integer for the amount of CPU threads.\nThe command line interface shall accept a file path for the input.\nThe command line interface shall check the input is valid.\nThe command line interface shall accept a file path for the output.\nThe command line interface shall accept an optional file of regions of interest.\nThe command line interface shall accept an integer for chromosome bin width.\n\nFile Input Requirements\n\nThe program shall read Sequence Alignment Map (SAM) files.\nThe program shall read Binary Alignment Map (BAM) files.\nThe program shall read Browser Extensible Data (BED) files.\nThe program shall accept one SAM or BAM file as input.\nThe program shall extract chromosome sizes from the input SAM or BAM files.\n\nFile Output Requirements\n\nThe program shall output a BED-compliant file.\nThe output shall be sorted first by chromsome, then by start position, then by end position.\nThe output shall have a fourth (4th) column with the coverage value at that base.\nThe output shall merge consecutive bases with the same coverage\nThe output shall be tab-separated.\n\nParallel Processing Requirements\n\nThe program shall use POSIX threads for multithreaded processing.\nThe program shall split the chromosome into equal sized bins.\n\nThe program shall allow the last bin to be less than the bin size if the chromosome cannot be broken up evenly.\n\nThe program shall share an open read-only file handle of the input SAM or BAM file across threads.\nA thread shall store its bin start position.\nA thread shall store its bin end position.\nA thread shall store its output as a string.\n\nSAM/BAM File Processing Requirements\n\nThe program shall ignore unmapped reads.\nThe program shall ignore reads that are not primary alignments.\nThe program shall ignore reads that fail platform/vendor quality checks.\nThe program shall ignore reads that are PCR or optical duplicates.\nThe program shall ignore reads that are supplementary alignments.\nThe program shall extract the CIGAR string from a mapped read alignment.\nThe program shall increment one base along the read if the CIGAR operation is an alignment match.\nThe program shall increment one base along the reference if the CIGAR operation is an alignment match.\nThe program shall increment one base along the read if the CIGAR operation is an insertion.\nThe program shall not change the reference position if the CIGAR operation is an insertion.\nThe program shall not change the read position if the CIGAR operation is a deletion.\nThe program shall increment one base along the reference if the CIGAR operation is a deletion.\nThe program shall not change the read position if the CIGAR operation is a skipped region from the reference.\nThe program shall increment one base along the reference if the CIGAR operation is a skipped region from the reference.\nThe program shall increment one base along the read if the CIGAR operation is a soft clipped base.\nThe program shall not change the reference position if the CIGAR operation is a soft clipped base.\nThe program shall not change the read position if the CIGAR operation is a hard clipped base.\nThe program shall not change the reference position if the CIGAR operation is a hard clipped base.\nThe program shall increment one base along the read if the CIGAR operation is a sequence match.\nThe program shall increment one base along the reference if the CIGAR operation is a sequence match.\nThe program shall increment one base along the read if the CIGAR operation is a sequence mismatch.\nThe program shall increment one base along the reference if the CIGAR operation is a sequence mismatch.\nThe program shall count as base as covered if the CIGAR operation is an alignment match, a sequence match, or a sequence mismatch.\nThe program shall not count as base as covered if the CIGAR operation is an insertion, a deletion, a soft clipped base, a hard clipped base, or a skipped region from the reference\n\n\n\n\nNon-Functional Requirements\n\nOperating Requirements\n\nThe program shall work on Linux systems.\nThe program shall work on macOS systems.\nThe program shall run from a terminal.\nThe program shall work through a command line interface.\nThe program shall work on x86 CPU architectures.\nThe program shall work on ARM CPU architectures.\n\nPerformance Requirements\n\nThe program shall read a region file in five (5) seconds.\nThe program shall process at least one thousand (1000) reads per second.\nThe program shall process at least one million (1,000,000) basepairs of data per second.\nThe program shall use eight (8) gigabytes or less of random access memory.\nThe program shall compile in fifteen (15) seconds or less.\n\nUsability Requirements\n\nThe program shall use English usage comments.\nThe program shall provide a help message for the user.\nThe program shall provide error messages upon system failure.\nThe program shall having a companion website describing usage.\nThe program shall provide an example dataset.\nThe program shall provide a tutorial for users.\n\nAvailiability Requirements\n\nThe program shall be available for no cost.\nThe program shall be available to the public.\nThe program shall be available on GitHub.\nThe program shall be available in pre-compiled binaries.\nThe program shall be available through bioconda.\n\nMaintainability Requirements\n\nThe program shall use Git for version control.\nThe program shall use semantic versioning.\nIssues shall be acknowledged within two (2) business days.\nPull requests shall be acknowledged within two (2) business days.\nMinor issues (e.g., bugs) shall be resolved within five (5) business days.\nMajor issues (e.g., feature requests) shall be resolved within fifteen (15) business days.",
    "crumbs": [
      "Documents",
      "Software Requirements Specification"
    ]
  },
  {
    "objectID": "meetings/GVSU-CIS641-PackingTheBits-2024-09-30.html",
    "href": "meetings/GVSU-CIS641-PackingTheBits-2024-09-30.html",
    "title": "WGBS Genome Coverage",
    "section": "",
    "text": "Team name: Packing the Bits\nMembers present: Jacob Morrison\nDate: 30 September 2024\nTime: 15:50\nDiscussion points:\n\nInitial project proposal complete (HW2)\nSystem request complete (IC1)\nUse case diagrams started (IC2, in progress)\n\nGoals for next week (include responsibilities)\nAll responsibilities handled by Jacob Morrison\n\nStart requirement specification\nStart thinking about what data needs to be collected\nStart forming collected data into potential data structures",
    "crumbs": [
      "Meetings",
      "2024-09-30"
    ]
  },
  {
    "objectID": "meetings/GVSU-CIS641-PackingTheBits-2024-09-30.html#meeting-minutes",
    "href": "meetings/GVSU-CIS641-PackingTheBits-2024-09-30.html#meeting-minutes",
    "title": "WGBS Genome Coverage",
    "section": "",
    "text": "Team name: Packing the Bits\nMembers present: Jacob Morrison\nDate: 30 September 2024\nTime: 15:50\nDiscussion points:\n\nInitial project proposal complete (HW2)\nSystem request complete (IC1)\nUse case diagrams started (IC2, in progress)\n\nGoals for next week (include responsibilities)\nAll responsibilities handled by Jacob Morrison\n\nStart requirement specification\nStart thinking about what data needs to be collected\nStart forming collected data into potential data structures",
    "crumbs": [
      "Meetings",
      "2024-09-30"
    ]
  },
  {
    "objectID": "website/docs.html",
    "href": "website/docs.html",
    "title": "Documents",
    "section": "",
    "text": "Collected Project Documents\n\nProject proposal\nSoftware Requirements Specification",
    "crumbs": [
      "Documents"
    ]
  },
  {
    "objectID": "website/404.html",
    "href": "website/404.html",
    "title": "Page Not Found",
    "section": "",
    "text": "The page you requested cannot be found. Try searching to find what you’re looking for."
  },
  {
    "objectID": "website/artifacts.html",
    "href": "website/artifacts.html",
    "title": "Artifacts",
    "section": "",
    "text": "Collected Project Artifacts\n\nSystem request\nDiagrams (use case, activity, etc.)",
    "crumbs": [
      "Artifacts"
    ]
  }
]