[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Genomic Coverage from Whole Genome Bisulfite Sequencing Data",
    "section": "",
    "text": "Description\nDNA sequencing is a common practice in biomedical research. The sequencing process requires collecting DNA from a sample (e.g., a tumor biopsy or a healthy tissue nearby), extracting the DNA from the cells, and then fragmenting the full length DNA strands into smaller chunks. These chunks are then placed on a “sequencer,” where the individual bases are read from the DNA fragments. The output from the sequencer is called a “read” and is then aligned back to a reference genome (the human reference genome is about three billion bases long) in order to find where the small fragment (usually around 100-150 bases in length) came from.\nOne possible analysis that can be done is to find the “coverage” across the entire genome. To do this, you count the total number of reads that cover each individual loci, or base, in the genome. One example of performing this analysis is as a part of a quality control pipeline within BISCUIT to verify a sequencing experiment consistently covered the entire genome. Currently, the pipeline uses bedtools to do this, but it is a slow process. One option for improving the speed of this process would be to use mosdepth, a tool specifically designed for finding coverages. However, it does not calculate the exact metrics needed in the BISCUIT quality control pipeline.\nThis project improves upon the existing bedtools implementation by calculating the needed metrics on the fly and utilizing parallelization during processing. The tool is written in C for plugging in to BISCUIT following its completion.\n\n\nDeliverables\n\nArtifacts\n\nSystem request\nDiagrams (use case, activity, etc.)\n\nDocuments\n\nProject proposal\nSoftware Requirements Specification\nSoftware Requirements Specification (Final Version)\nMidterm Presentation\nFinal Presentation\n\nMeeting Minutes\n\n30 September 2024\n07 October 2024\n14 October 2024\n23 October 2024\n28 October 2024\n04 November 2024\n11 November 2024\n18 November 2024\n25 November 2024\n02 December 2024"
  },
  {
    "objectID": "website/artifacts.html",
    "href": "website/artifacts.html",
    "title": "Artifacts",
    "section": "",
    "text": "Collected Project Artifacts\n\nSystem request\nDiagrams (use case, activity, etc.)",
    "crumbs": [
      "Artifacts"
    ]
  },
  {
    "objectID": "website/404.html",
    "href": "website/404.html",
    "title": "Page Not Found",
    "section": "",
    "text": "The page you requested cannot be found. Try searching to find what you’re looking for."
  },
  {
    "objectID": "website/meetings.html",
    "href": "website/meetings.html",
    "title": "Meeting Minutes",
    "section": "",
    "text": "Collected Project Meeting Minutes\n\n30 September 2024\n07 October 2024\n14 October 2024\n23 October 2024\n28 October 2024\n04 November 2024\n11 November 2024\n18 November 2024\n25 November 2024\n02 December 2024",
    "crumbs": [
      "Meetings",
      "Meeting Minutes"
    ]
  },
  {
    "objectID": "meetings/GVSU-CIS641-PackingTheBits-2024-10-07.html",
    "href": "meetings/GVSU-CIS641-PackingTheBits-2024-10-07.html",
    "title": "WGBS Genome Coverage",
    "section": "",
    "text": "Team name: Packing the Bits\nMembers present: Jacob Morrison\nDate: 07 October 2024\nTime: 13:10\nDiscussion points:\n\nUse case diagrams created (IC2)\nActivity diagrams created (IC2)\nRequirements started (HW3, in progress)\nSome data that needs to be collected\n\nCoverage at each base in region\nWhether a read covers a base or not\n\nSome data structures\n\nNeed a data structure for passing shared information to each thread\nNeed an array for storing coverages in each region\n\n\nGoals for next week (include responsibilities):\nAll responsibilities handled by Jacob Morrison\n\nFinish requirements specification\nBegin implementation\nCreate presentation for midterm",
    "crumbs": [
      "Meetings",
      "2024-10-07"
    ]
  },
  {
    "objectID": "meetings/GVSU-CIS641-PackingTheBits-2024-10-07.html#meeting-minutes",
    "href": "meetings/GVSU-CIS641-PackingTheBits-2024-10-07.html#meeting-minutes",
    "title": "WGBS Genome Coverage",
    "section": "",
    "text": "Team name: Packing the Bits\nMembers present: Jacob Morrison\nDate: 07 October 2024\nTime: 13:10\nDiscussion points:\n\nUse case diagrams created (IC2)\nActivity diagrams created (IC2)\nRequirements started (HW3, in progress)\nSome data that needs to be collected\n\nCoverage at each base in region\nWhether a read covers a base or not\n\nSome data structures\n\nNeed a data structure for passing shared information to each thread\nNeed an array for storing coverages in each region\n\n\nGoals for next week (include responsibilities):\nAll responsibilities handled by Jacob Morrison\n\nFinish requirements specification\nBegin implementation\nCreate presentation for midterm",
    "crumbs": [
      "Meetings",
      "2024-10-07"
    ]
  },
  {
    "objectID": "meetings/GVSU-CIS641-PackingTheBits-2024-11-25.html",
    "href": "meetings/GVSU-CIS641-PackingTheBits-2024-11-25.html",
    "title": "WGBS Genome Coverage",
    "section": "",
    "text": "Team name: Packing the Bits\nMembers present: Jacob Morrison\nDate: 25 November 2024\nTime: 15:10\nDiscussion points:\n\nStarted on testing\n\nBasic BASH script that runs old code and new code on an input BAM and then compares results\n\nLooking to see which flags affect outputs\nAllow for 0.5% difference in results (for floats) rather than standard float comparison to allow for differences in rounding between AWK and fprintf\n\nIf time, compare old, single-threaded new, and multi-threaded new across several input files sizes to check time speed up\n\nHW5 finished and turned in\n\nGoals for next week (include responsibilities):\nAll responsibilities handled by Jacob Morrison\n\nFinish up project\n\nPresentation\nMake sure all artifacts align across project\nComplete change management plan\nTraceability\nMake sure all artifacts are linked\nSpelling/grammar check\nUpdate all READMEs\nUpdate website with all links\nSubmit presentation and project\nSelf reflection",
    "crumbs": [
      "Meetings",
      "2024-11-25"
    ]
  },
  {
    "objectID": "meetings/GVSU-CIS641-PackingTheBits-2024-11-25.html#meeting-minutes",
    "href": "meetings/GVSU-CIS641-PackingTheBits-2024-11-25.html#meeting-minutes",
    "title": "WGBS Genome Coverage",
    "section": "",
    "text": "Team name: Packing the Bits\nMembers present: Jacob Morrison\nDate: 25 November 2024\nTime: 15:10\nDiscussion points:\n\nStarted on testing\n\nBasic BASH script that runs old code and new code on an input BAM and then compares results\n\nLooking to see which flags affect outputs\nAllow for 0.5% difference in results (for floats) rather than standard float comparison to allow for differences in rounding between AWK and fprintf\n\nIf time, compare old, single-threaded new, and multi-threaded new across several input files sizes to check time speed up\n\nHW5 finished and turned in\n\nGoals for next week (include responsibilities):\nAll responsibilities handled by Jacob Morrison\n\nFinish up project\n\nPresentation\nMake sure all artifacts align across project\nComplete change management plan\nTraceability\nMake sure all artifacts are linked\nSpelling/grammar check\nUpdate all READMEs\nUpdate website with all links\nSubmit presentation and project\nSelf reflection",
    "crumbs": [
      "Meetings",
      "2024-11-25"
    ]
  },
  {
    "objectID": "meetings/GVSU-CIS641-PackingTheBits-2024-09-30.html",
    "href": "meetings/GVSU-CIS641-PackingTheBits-2024-09-30.html",
    "title": "WGBS Genome Coverage",
    "section": "",
    "text": "Team name: Packing the Bits\nMembers present: Jacob Morrison\nDate: 30 September 2024\nTime: 15:50\nDiscussion points:\n\nInitial project proposal complete (HW2)\nSystem request complete (IC1)\nUse case diagrams started (IC2, in progress)\n\nGoals for next week (include responsibilities)\nAll responsibilities handled by Jacob Morrison\n\nStart requirement specification\nStart thinking about what data needs to be collected\nStart forming collected data into potential data structures",
    "crumbs": [
      "Meetings",
      "2024-09-30"
    ]
  },
  {
    "objectID": "meetings/GVSU-CIS641-PackingTheBits-2024-09-30.html#meeting-minutes",
    "href": "meetings/GVSU-CIS641-PackingTheBits-2024-09-30.html#meeting-minutes",
    "title": "WGBS Genome Coverage",
    "section": "",
    "text": "Team name: Packing the Bits\nMembers present: Jacob Morrison\nDate: 30 September 2024\nTime: 15:50\nDiscussion points:\n\nInitial project proposal complete (HW2)\nSystem request complete (IC1)\nUse case diagrams started (IC2, in progress)\n\nGoals for next week (include responsibilities)\nAll responsibilities handled by Jacob Morrison\n\nStart requirement specification\nStart thinking about what data needs to be collected\nStart forming collected data into potential data structures",
    "crumbs": [
      "Meetings",
      "2024-09-30"
    ]
  },
  {
    "objectID": "meetings/GVSU-CIS641-PackingTheBits-2024-10-14.html",
    "href": "meetings/GVSU-CIS641-PackingTheBits-2024-10-14.html",
    "title": "WGBS Genome Coverage",
    "section": "",
    "text": "Team name: Packing the Bits\nMembers present: Jacob Morrison\nDate: 14 October 2024\nTime: 15:40\nDiscussion points:\n\nRequirements finished (HW3)\nCRC created (IC3, in progress)\nClass diagram(s) to be created (IC3, in progress)\nObject diagram(s) to be created (IC3, in progress)\nImplementation started\n\nCLI implemented\nStarted file processing\n\n\nGoals for next week (include responsibilities):\nAll responsibilities handled by Jacob Morrison\n\nContinue implementation\nCreate presentation for midterm",
    "crumbs": [
      "Meetings",
      "2024-10-14"
    ]
  },
  {
    "objectID": "meetings/GVSU-CIS641-PackingTheBits-2024-10-14.html#meeting-minutes",
    "href": "meetings/GVSU-CIS641-PackingTheBits-2024-10-14.html#meeting-minutes",
    "title": "WGBS Genome Coverage",
    "section": "",
    "text": "Team name: Packing the Bits\nMembers present: Jacob Morrison\nDate: 14 October 2024\nTime: 15:40\nDiscussion points:\n\nRequirements finished (HW3)\nCRC created (IC3, in progress)\nClass diagram(s) to be created (IC3, in progress)\nObject diagram(s) to be created (IC3, in progress)\nImplementation started\n\nCLI implemented\nStarted file processing\n\n\nGoals for next week (include responsibilities):\nAll responsibilities handled by Jacob Morrison\n\nContinue implementation\nCreate presentation for midterm",
    "crumbs": [
      "Meetings",
      "2024-10-14"
    ]
  },
  {
    "objectID": "meetings/GVSU-CIS641-PackingTheBits-2024-11-11.html",
    "href": "meetings/GVSU-CIS641-PackingTheBits-2024-11-11.html",
    "title": "WGBS Genome Coverage",
    "section": "",
    "text": "Team name: Packing the Bits\nMembers present: Jacob Morrison\nDate: 11 November 2024\nTime: 13:55\nDiscussion points:\n\nNot much work since last week with implementation already finished\nHomework 5 (class diagrams) received\n\nGoals for next week (include responsibilities):\nAll responsibilities handled by Jacob Morrison\n\nWork on some testing (repeat from last meeting)\n\nTesting will be a basic set of tests\n\nEnsure new implementation is faster than old version\nCheck for differences in output and understand why those arise\n\n\nDo HW5 (class diagrams)",
    "crumbs": [
      "Meetings",
      "2024-11-11"
    ]
  },
  {
    "objectID": "meetings/GVSU-CIS641-PackingTheBits-2024-11-11.html#meeting-minutes",
    "href": "meetings/GVSU-CIS641-PackingTheBits-2024-11-11.html#meeting-minutes",
    "title": "WGBS Genome Coverage",
    "section": "",
    "text": "Team name: Packing the Bits\nMembers present: Jacob Morrison\nDate: 11 November 2024\nTime: 13:55\nDiscussion points:\n\nNot much work since last week with implementation already finished\nHomework 5 (class diagrams) received\n\nGoals for next week (include responsibilities):\nAll responsibilities handled by Jacob Morrison\n\nWork on some testing (repeat from last meeting)\n\nTesting will be a basic set of tests\n\nEnsure new implementation is faster than old version\nCheck for differences in output and understand why those arise\n\n\nDo HW5 (class diagrams)",
    "crumbs": [
      "Meetings",
      "2024-11-11"
    ]
  },
  {
    "objectID": "artifacts/system_request.html",
    "href": "artifacts/system_request.html",
    "title": "Request Creator",
    "section": "",
    "text": "Request Creator\n\nJacob Morrison\n\n\n\nProject Sponsor\nDr. Erik Fredericks\n\n\nBusiness Need\nThis project exists to improve the efficiency of quality control of DNA sequencing experiments by merging multiple steps of the process into a single executable.\n\n\nBusiness Requirements\n\nMerge coverage determination and statistical calculations\nUse multithreading to improve efficiency\nIntegrate process within existing toolkit\n\n\n\nBusiness Value\nI expect this project will reduce the time it takes to run the full quality control script, thereby decreasing the time it takes to complete the initial analysis. Further, this reduction in time will benefit clinical users, who often work in environments with limited resources and tight timelines.\n\n\nSpecial Issues or Constraints\n\nProject will be as a standalone tool before being integrated into existing toolkit\nPotential issue: Merging data from individual threads\nPotential issue: Allowing user to process a subset of data",
    "crumbs": [
      "Artifacts",
      "System Request"
    ]
  },
  {
    "objectID": "docs/software_requirements_specification.html",
    "href": "docs/software_requirements_specification.html",
    "title": "Overview",
    "section": "",
    "text": "Overview\nThis document servers as the software requirements specification for the GVSU CIS 641 full semester project. Both functional and non-functional requirements are described.\n\n\nAbbreviation Definitions\n\nSAM file: Sequence Alignment Map file\nBAM file: Binary Alignment Map file\nBED file: Browser Extensible Data file\nCIGAR string: Compact Idiosyncratic Gapped Alignment Report string\n\n\n\nFunctional Requirements\n\nCommand Line Interface Requirements\n\nThe command line interface shall accept an integer for the amount of CPU threads.\nThe command line interface shall accept a file path for the input.\nThe command line interface shall check the inputs are valid.\nThe command line interface shall accept a file path for the output.\nThe command line interface shall accept an optional file of regions of interest.\nThe command line interface shall accept an integer for chromosome bin width.\n\nFile Input Requirements\n\nThe program shall read Sequence Alignment Map (SAM) files.\nThe program shall read Binary Alignment Map (BAM) files.\nThe program shall read Browser Extensible Data (BED) files.\nThe program shall accept one SAM or BAM file as input.\nThe program shall extract chromosome sizes from the input SAM or BAM files.\n\nFile Output Requirements\n\nThe program shall output a BED-compliant file.\nThe output shall be sorted first by chromsome, then by start position, then by end position.\nThe output shall have a fourth (4th) column with the coverage value at that base.\nThe output shall merge consecutive bases with the same coverage\nThe output shall be tab-separated.\n\nParallel Processing Requirements\n\nThe program shall use POSIX threads for multithreaded processing.\nThe program shall split the chromosome into equal sized bins.\n\nThe program shall allow the last bin to be less than the bin size if the chromosome cannot be broken up evenly.\n\nThe program shall share an open read-only file handle of the input SAM or BAM file across threads.\nA thread shall store its bin start position.\nA thread shall store its bin end position.\nA thread shall store its output as a string.\n\nSAM/BAM File Processing Requirements\n\nThe program shall ignore unmapped reads.\nThe program shall ignore reads that are not primary alignments.\nThe program shall ignore reads that fail platform/vendor quality checks.\nThe program shall ignore reads that are PCR or optical duplicates.\nThe program shall ignore reads that are supplementary alignments.\nThe program shall extract the CIGAR string from a mapped read alignment.\nThe program shall increment one base along the read if the CIGAR operation is an alignment match.\nThe program shall increment one base along the reference if the CIGAR operation is an alignment match.\nThe program shall increment one base along the read if the CIGAR operation is an insertion.\nThe program shall not change the reference position if the CIGAR operation is an insertion.\nThe program shall not change the read position if the CIGAR operation is a deletion.\nThe program shall increment one base along the reference if the CIGAR operation is a deletion.\nThe program shall not change the read position if the CIGAR operation is a skipped region from the reference.\nThe program shall increment one base along the reference if the CIGAR operation is a skipped region from the reference.\nThe program shall increment one base along the read if the CIGAR operation is a soft clipped base.\nThe program shall not change the reference position if the CIGAR operation is a soft clipped base.\nThe program shall not change the read position if the CIGAR operation is a hard clipped base.\nThe program shall not change the reference position if the CIGAR operation is a hard clipped base.\nThe program shall increment one base along the read if the CIGAR operation is a sequence match.\nThe program shall increment one base along the reference if the CIGAR operation is a sequence match.\nThe program shall increment one base along the read if the CIGAR operation is a sequence mismatch.\nThe program shall increment one base along the reference if the CIGAR operation is a sequence mismatch.\nThe program shall count as base as covered if the CIGAR operation is an alignment match, a sequence match, or a sequence mismatch.\nThe program shall not count as base as covered if the CIGAR operation is an insertion, a deletion, a soft clipped base, a hard clipped base, or a skipped region from the reference\n\n\n\n\nNon-Functional Requirements\n\nOperating Requirements\n\nThe program shall work on Linux systems.\nThe program shall work on macOS systems.\nThe program shall run from a terminal.\nThe program shall work through a command line interface.\nThe program shall work on x86 CPU architectures.\nThe program shall work on ARM CPU architectures.\n\nPerformance Requirements\n\nThe program shall read a region file in five (5) seconds.\nThe program shall process at least one thousand (1000) reads per second.\nThe program shall process at least one million (1,000,000) basepairs of data per second.\nThe program shall use eight (8) gigabytes or less of random access memory.\nThe program shall compile in fifteen (15) seconds or less.\n\nUsability Requirements\n\nThe program shall use English comments.\nThe program shall provide a help message for the user.\nThe program shall provide error messages upon system failure.\nThe program shall having a companion website describing usage.\nThe program shall provide an example dataset.\nThe program shall provide a tutorial for users.\n\nAvailiability Requirements\n\nThe program shall be available for no cost.\nThe program shall be available to the public.\nThe program shall be available on GitHub.\nThe program shall be available in pre-compiled binaries.\nThe program shall be available through bioconda.\n\nMaintainability Requirements\n\nThe program shall use Git for version control.\nThe program shall use semantic versioning.\nIssues shall be acknowledged within two (2) business days.\nPull requests shall be acknowledged within two (2) business days.\nMinor issues (e.g., bugs) shall be resolved within five (5) business days.\nMajor issues (e.g., feature requests) shall be resolved within fifteen (15) business days.",
    "crumbs": [
      "Documents",
      "Software Requirements Specification"
    ]
  },
  {
    "objectID": "docs/project-proposal.html",
    "href": "docs/project-proposal.html",
    "title": "Introduction",
    "section": "",
    "text": "Team name: Packing the Bits\nTeam members: Jacob Morrison\n\nIntroduction\nDNA sequencing is a common practice in biomedical research. The sequencing process requires collecting DNA from a sample (e.g., a tumor biopsy or a healthy tissue nearby), extracting the DNA from the cells, and then fragmenting the full length DNA strands into smaller chunks. These chunks are then placed on a “sequencer,” where the individual bases are read from the DNA fragments. The output from the sequencer is called a “read” and is then aligned back to a reference genome (the human reference genome is about three billion bases long) in order to find where the small fragment (usually around 100-150 bases in length) came from.\nOne possible analysis that can be done is to find the “coverage” across the entire genome. To do this, you count the total number of reads that cover each individual loci, or base, in the genome. One example of performing this analysis is as a part of a quality control pipeline within BISCUIT (a project I maintain for work) to verify a sequencing experiment consistently covered the entire genome. Currently, the pipeline uses bedtools to do this, but it is a slow process. One option for improving the speed of this process would be to use mosdepth, a tool specifically designed for finding coverages. However, it does not calculate the exact metrics that I need.\nI propose writing a small tool that improves upon the existing bedtools implementation and calculates the metrics I need on the fly. The tool will be written in C for plugging in to BISCUIT following the completion of class. It will also be multithreaded to improve the efficiency of the single-threaded bedtools option. Depending on the final state of the project, it may be sufficient to warrant an academic publication (either as a pre-print or a peer-reviewed application note).\n\n\nAnticipated Technologies\n\nOS: macOS or Linux\nEditor: vim\nLanguage: C\nThird-Party Libraries:\n\nhtslib\nPOSIX threads\nzlib\n\n\n\n\nMethod/Approach\nBroadly, I plan to start off with doing as much analysis and design ahead of time as I can. This will include defining as many requirements at the outset of the project (although I anticipate having to revise these during the implementation stage). I plan to give myself the most time on the implementation stage, with an approximately equal amount of time for analysis, design, and implementation. Testing will have a shorter amount of dedicated time; however, I plan to write some of the tests during the implementation stage. For the sake of this project, most of my tests will focus on the output of the tool to ensure it returns the same values as before. I will include some unit tests on some of the smaller functionality, but these won’t be the focus of my tests.\n\n\nEstimated Timeline\n\n\n\nTask\nEstimated Completion Date\n\n\n\n\nAnalysis\n30 September 2024\n\n\nDesign\n14 October 2024\n\n\nRequirements\n14 October 2024\n\n\nImplementation\n14 November 2024\n\n\nTesting\n31 November 2024\n\n\nWrapping Up\n6 December 2024\n\n\n\n\n\nAnticipated Problems\nPotential problems include, but are not limited to:\n\nDesign\n\nCreating class diagrams\n\nImplementation\n\nHandling reads that span adjacent regions handled by different threads\nMerging regions of similar coverage that span adjacent regions\nHandling regions of interest to calculate metrics for\n\nTesting\n\nUnit testing",
    "crumbs": [
      "Documents",
      "Project Proposal"
    ]
  },
  {
    "objectID": "docs/software_requirements_specification_final.html",
    "href": "docs/software_requirements_specification_final.html",
    "title": "Overview",
    "section": "",
    "text": "This document serves as the culmination of the GVSU CIS 641 full semester project. It includes the final software requirement specification, a change management plan, and traceability between requirements and various sundry artifacts.",
    "crumbs": [
      "Documents",
      "(Final) Software Requirements Specification"
    ]
  },
  {
    "objectID": "docs/software_requirements_specification_final.html#functional-requirements",
    "href": "docs/software_requirements_specification_final.html#functional-requirements",
    "title": "Overview",
    "section": "Functional Requirements",
    "text": "Functional Requirements\n\nCommand Line Interface Requirements\n\n\n\n\n\n\n\nID\nRequirement\n\n\n\n\nFR00\nThe command line interface shall have a method for reading and parsing command line inputs.\n\n\nFR01\nThe command line interface shall accept an optional integer for the number of CPU threads.\n\n\nFR02\nThe command line interface shall accept an optional integer for the window step size.\n\n\nFR03\nThe command line interface shall accept an optional string for a prefix to all output file names.\n\n\nFR04\nThe command line interface shall accept an optional file path for the genomic windows with the top ten (10) percent of GC content.\n\n\nFR05\nThe command line interface shall accept an optional file path for the genomic windows with the bottom ten (10) percent of GC content.\n\n\nFR06\nThe command line interface shall accept a required file path for the CpG genomic locations.\n\n\nFR07\nThe command line interface shall accept a required file path for the input alignment file.\n\n\nFR08\nThe command line interface shall set a default value for the number of CPU threads when the corresponding command line option is not provided.\n\n\nFR09\nThe command line interface shall set a default value for the window step size when the corresponding command line option is not provided.\n\n\nFR10\nThe command line interface shall not prepend anything to the output file names when the prefix command line option is not provided.\n\n\nFR11\nThe command line interface shall check the number of CPU threads are greater than zero (0).\n\n\nFR12\nThe command line interface shall set the number of CPU threads to the default value when the given value is less than or equal to zero (0).\n\n\nFR13\nThe command line interface shall check the window step size is greater than zero (0).\n\n\nFR14\nThe command line interface shall set the window step size to the default value when the given value is less than or equal to zero (0).\n\n\n\n\n\nFile Input Requirements\n\n\n\n\n\n\n\nID\nRequirement\n\n\n\n\nFR15\nThe program shall read Sequence Alignment Map (SAM) files.\n\n\nFR16\nThe program shall read Binary Alignment Map (BAM) files.\n\n\nFR17\nThe program shall accept one SAM or BAM file as the alignment file input.\n\n\nFR18\nThe program shall extract chromosome sizes from the input SAM or BAM files.\n\n\nFR19\nThe program shall read Browser Extensible Data (BED) files.\n\n\nFR20\nThe program shall require BED files to be block gzipped.\n\n\n\n\n\nFile Output Requirements\n\n\n\n\n\n\n\nID\nRequirement\n\n\n\n\nFR21\nThe program shall have two output file types: a coverage distribution file (referred to as “covdist”) and a coefficient of variation file (referred to as “cv”).\n\n\nFR22\nThe cv file shall have a two line header.\n\n\nFR23\nThe first line of the cv file shall say: “BISCUITqc Uniformity Table”.\n\n\nFR24\nThe second line of the cv file shall say: “group mu sigma cv”.\n\n\nFR25\nThe words on the second line of the cv file shall be separated by tab characters.\n\n\nFR26\nAll lines after the two line header in the cv file shall be tab separated.\n\n\nFR27\nAll lines after the two line header in the cv file shall contain (in the following order) a group name (see Functional Requirements FR28-FR39 for group names), the mean coverage, the coverage standard deviation, and the coverage coefficient of variation.\n\n\nFR28\nThe group name for coverage across bases covered by all applicable reads shall be “all_base”.\n\n\nFR29\nThe group name for coverage across bases covered by reads with a mapping quality score (MAPQ) greater than or equal to forty (40) shall be “q40_base”.\n\n\nFR30\nThe group name for coverage across CpGs covered by all applicable reads shall be “all_cpg”.\n\n\nFR31\nThe group name for coverage across CpGs covered by reads with MAPQ greater than or equal to forty (40) shall be “q40_cpg”.\n\n\nFR32\nThe group name for coverage across bases covered by all applicable reads and fall in the top GC windows shall be “all_base_topgc” when a top GC file is provided.\n\n\nFR33\nThe group name for coverage across bases covered by reads with MAPQ greater than or equal to forty (40) and fall in the top GC windows shall be “q40_base_topgc” when a top GC file is provided.\n\n\nFR34\nThe group name for coverage across CpGs covered by all applicable reads and fall in the top GC windows shall be “all_cpg_topgc” when a top GC file is provided.\n\n\nFR35\nThe group name for coverage across CpGs covered by reads with MAPQ greater than or equal to forty (40) and fall in the top GC windows shall be “q40_cpg_topgc” when a top GC file is provided.\n\n\nFR36\nThe group name for coverage across bases covered by all applicable reads and fall in the bottom GC windows shall be “all_base_botgc” when a bottom GC file is provided.\n\n\nFR37\nThe group name for coverage across bases covered by reads with MAPQ greater than or equal to forty (40) and fall in the bottom GC windows shall be “q40_base_botgc” when a bottom GC file is provided.\n\n\nFR38\nThe group name for coverage across CpGs covered by all applicable reads and fall in the bottom GC windows shall be “all_cpg_botgc” when a bottom GC file is provided.\n\n\nFR39\nThe group name for coverage across CpGs covered by reads with MAPQ greater than or equal to forty (40) and fall in the bottom GC windows shall be “q40_cpg_botgc” when a bottom GC file is provided.\n\n\nFR40\nThere shall be one covdist file for each set of coverages found (listed in Functional Requirements FR41-FR52).\n\n\nFR41\nOne covdist file shall be for bases covered by all applicable reads and shall have the tag “All Bases”.\n\n\nFR42\nOne covdist file shall be for bases covered by all applicable reads with MAPQ greater than or equal to forty (40) and shall have the tag “Q40 Bases”.\n\n\nFR43\nOne covdist file shall be for CpGs covered by all applicable reads and shall have the tag “All CpGs”.\n\n\nFR44\nOne covdist file shall be for CpGs covered by all applicable reads with MAPQ greater than or equal to forty (40) and shall have the tag “Q40 CpGs”.\n\n\nFR45\nOne covdist file shall be for bases covered by all applicable reads and fall in the top GC windows and shall have the tag “All Top GC Bases” when a top GC file is provided.\n\n\nFR46\nOne covdist file shall be for bases covered by all applicable reads with MAPQ greater than or equal to forty (40) and fall in the top GC windows and shall have the tag “Q40 Top GC Bases” when a top GC file is provided.\n\n\nFR47\nOne covdist file shall be for CpGs covered by all applicable reads and fall in the top GC windows and shall have the tag “All Top GC CpGs” when a top GC file is provided.\n\n\nFR48\nOne covdist file shall be for CpGs covered by all applicable reads with MAPQ greater than or equal to forty (40) and fall in the top GC windows and shall have the tag “Q40 Top GC CpGs” when a top GC file is provided.\n\n\nFR49\nOne covdist file shall be for bases covered by all applicable reads and fall in the bottom GC windows and shall have the tag “All Bot GC Bases” when a bottom GC file is provided.\n\n\nFR50\nOne covdist file shall be for bases covered by all applicable reads with MAPQ greater than or equal to forty (40) and fall in the bottom GC windows and shall have the tag “Q40 Bot GC Bases” when a bottom GC file is provided.\n\n\nFR51\nOne covdist file shall be for CpGs covered by all applicable reads and fall in the bottom GC windows and shall have the tag “All Bot GC CpGs” when a bottom GC file is provided.\n\n\nFR52\nOne covdist file shall be for CpGs covered by all applicable reads with MAPQ greater than or equal to forty (40) and fall in the bottom GC windows and shall have the tag “Q40 Bot GC CpGs” when a bottom GC file is provided.\n\n\nFR53\nEach covdist file shall have a two line header.\n\n\nFR54\nThe first line of each covdist file shall say: “BISCUITqc Depth Distribution - TAG” where TAG is replaced by a tag unique to each covdist file (see Functional Requirements FR41-FR52 for the tags).\n\n\nFR55\nThe second line of each covdist file shall say: “depth count”.\n\n\nFR56\nThe words on the second line of each covdist file shall be separated by tab characters.\n\n\nFR57\nAll lines after the two line header in the covdist file shall be tab separated.\n\n\nFR58\nAll lines after the two line header in the covdist file shall contain the coverage level in the first position of the line and the number of bases with that coverage level in the second position of the line.\n\n\n\n\n\nParallel Processing Requirements\n\n\n\n\n\n\n\nID\nRequirement\n\n\n\n\nFR59\nThe program shall use POSIX threads for multithreaded processing.\n\n\nFR60\nThe program shall split the chromosome into equal sized bins.\n\n\nFR61\nThe program shall allow the last bin to be less than the bin size if the chromosome cannot be broken up evenly.\n\n\nFR62\nA thread shall store its block identification number.\n\n\nFR63\nA thread shall store its bin start position.\n\n\nFR64\nA thread shall store its bin end position.\n\n\nFR65\nA thread shall store a bit array of positions in the bin that are covered by CpGs.\n\n\nFR66\nA thread shall store a bit array of positions in the bin that are covered by top GC windows.\n\n\nFR67\nThe bit array shall be all zeroes (0s) if no top GC file is provided.\n\n\nFR68\nA thread shall store a bit array of positions in the bin that are covered by bottom GC windows.\n\n\nFR69\nThe bit array shall be all zeroes (0s) if no bottom GC file is provided.\n\n\n\n\n\nSAM/BAM File Processing Requirements\n\n\n\n\n\n\n\nID\nRequirement\n\n\n\n\nFR70\nThe program shall ignore unmapped reads.\n\n\nFR71\nThe program shall ignore reads that are not primary alignments.\n\n\nFR72\nThe program shall ignore reads that fail platform/vendor quality checks.\n\n\nFR73\nThe program shall ignore reads that are PCR or optical duplicates.\n\n\nFR74\nThe program shall ignore reads that are supplementary alignments.\n\n\nFR75\nThe program shall extract the CIGAR string from a mapped read alignment.\n\n\nFR76\nThe program shall increment one base along the reference if the CIGAR operation is an alignment match.\n\n\nFR77\nThe program shall not change the reference position if the CIGAR operation is an insertion.\n\n\nFR78\nThe program shall increment one base along the reference if the CIGAR operation is a deletion.\n\n\nFR79\nThe program shall increment one base along the reference if the CIGAR operation is a skipped region from the reference.\n\n\nFR80\nThe program shall not change the reference position if the CIGAR operation is a soft clipped base.\n\n\nFR81\nThe program shall not change the reference position if the CIGAR operation is a hard clipped base.\n\n\nFR82\nThe program shall increment one base along the reference if the CIGAR operation is a sequence match.\n\n\nFR83\nThe program shall increment one base along the reference if the CIGAR operation is a sequence mismatch.\n\n\nFR84\nThe program shall count a base as covered if the CIGAR operation is an alignment match, a sequence match, or a sequence mismatch.\n\n\nFR85\nThe program shall not count a base as covered if the CIGAR operation is an insertion, a deletion, a soft clipped base, a hard clipped base, or a skipped region from the reference.",
    "crumbs": [
      "Documents",
      "(Final) Software Requirements Specification"
    ]
  },
  {
    "objectID": "docs/software_requirements_specification_final.html#non-functional-requirements",
    "href": "docs/software_requirements_specification_final.html#non-functional-requirements",
    "title": "Overview",
    "section": "Non-Functional Requirements",
    "text": "Non-Functional Requirements\n\nOperating Requirements\n\n\n\nID\nRequirement\n\n\n\n\nNFR01\nThe program shall work on Linux systems.\n\n\nNFR02\nThe program shall work on macOS systems.\n\n\nNFR03\nThe program shall run from a terminal.\n\n\nNFR04\nThe program shall work through a command line interface.\n\n\nNFR05\nThe program shall work on x86 CPU architectures.\n\n\nNFR06\nThe program shall work on ARM CPU architectures.\n\n\n\n\n\nPerformance Requirements\n\n\n\n\n\n\n\nID\nRequirement\n\n\n\n\nNFR07\nThe program shall read a genomic window from a block gzipped BED file in two (2) seconds or less.\n\n\nNFR08\nThe program shall process at least one thousand (1000) reads per second.\n\n\nNFR09\nThe program shall process at least one million (1,000,000) basepairs of data per second.\n\n\nNFR10\nThe program shall use eight (8) gigabytes or less of random access memory.\n\n\nNFR11\nThe program shall compile in fifteen (15) seconds or less.\n\n\n\n\n\nUsability Requirements\n\n\n\n\n\n\n\nID\nRequirement\n\n\n\n\nNFR12\nThe program shall use English comments.\n\n\nNFR13\nThe program shall provide a help message for the user.\n\n\nNFR14\nThe program shall provide error messages upon system failure.\n\n\nNFR15\nThe program shall have a companion website describing usage.\n\n\nNFR16\nThe program shall provide an example dataset.\n\n\nNFR17\nThe program shall provide a tutorial for users.\n\n\n\n\n\nAvailability Requirements\n\n\n\nID\nRequirement\n\n\n\n\nNFR18\nThe program shall be available for no cost.\n\n\nNFR19\nThe program shall be available to the public.\n\n\nNFR20\nThe program shall be available on GitHub.\n\n\nNFR21\nThe program shall be available in pre-compiled binaries.\n\n\nNFR22\nThe program shall be available through bioconda.\n\n\n\n\n\nMaintainability Requirements\n\n\n\n\n\n\n\nID\nRequirement\n\n\n\n\nNFR23\nThe program shall use Git for version control.\n\n\nNFR24\nThe program shall use semantic versioning.\n\n\nNFR25\nIssues shall be acknowledged within two (2) business days.\n\n\nNFR26\nPull requests shall be acknowledged within two (2) business days.\n\n\nNFR27\nMinor issues (e.g., bugs) shall be resolved within five (5) business days.\n\n\nNFR28\nMajor issues (e.g., feature requests) shall be resolved within fifteen (15) business days.",
    "crumbs": [
      "Documents",
      "(Final) Software Requirements Specification"
    ]
  },
  {
    "objectID": "docs/software_requirements_specification_final.html#abbreviation-definitions",
    "href": "docs/software_requirements_specification_final.html#abbreviation-definitions",
    "title": "Overview",
    "section": "Abbreviation Definitions",
    "text": "Abbreviation Definitions\n\n\n\n\n\n\n\nAbbreviation\nDefinition\n\n\n\n\nSAM\nSequence Alignment Map file\n\n\nBAM\nBinary Alignment Map file\n\n\nBED\nBrowser Extensible Data file\n\n\nCIGAR\nCompact Idiosyncratic Gapped Alignment Report string\n\n\nTop GC\nTop ten (10) percent of windows in the genome for GC content\n\n\nBottom GC\nBottom ten (10) percent of windows in the genome for GC content\n\n\nMAPQ\nMapping quality score",
    "crumbs": [
      "Documents",
      "(Final) Software Requirements Specification"
    ]
  },
  {
    "objectID": "docs/software_requirements_specification_final.html#training",
    "href": "docs/software_requirements_specification_final.html#training",
    "title": "Overview",
    "section": "Training",
    "text": "Training\nTraining should be a fairly easy process as, for most users, this code will be an under-the-hood change to an existing script they are using. General users will need to be made aware of any differences they can expect relative to the previous version. This will be done through a detailed list in the release notes for the version in which this change is made and a description of changes between the old and new versions in the online documentation. For users who want to run this subcommand on its own, there will be a tutorial provided on the online documentation that walks them through how to use this new functionality.",
    "crumbs": [
      "Documents",
      "(Final) Software Requirements Specification"
    ]
  },
  {
    "objectID": "docs/software_requirements_specification_final.html#integration",
    "href": "docs/software_requirements_specification_final.html#integration",
    "title": "Overview",
    "section": "Integration",
    "text": "Integration\nIntegration with existing analysis pipelines should be minimally invasive. Assuming users have updated to the release of BISCUIT with the new coverage functionality, they will not have to change any existing commands. Should they wish to use additional options (such as multithreading), then they will only need to add the requisite command line options to their command invocation to access them.",
    "crumbs": [
      "Documents",
      "(Final) Software Requirements Specification"
    ]
  },
  {
    "objectID": "docs/software_requirements_specification_final.html#resolve-issues",
    "href": "docs/software_requirements_specification_final.html#resolve-issues",
    "title": "Overview",
    "section": "Resolve Issues",
    "text": "Resolve Issues\nIssues shall be resolved in accordance with requirements NFR25-NFR28. Issues will be opened and managed via GitHub.",
    "crumbs": [
      "Documents",
      "(Final) Software Requirements Specification"
    ]
  },
  {
    "objectID": "docs/software_requirements_specification_final.html#use-case-diagram-traceability",
    "href": "docs/software_requirements_specification_final.html#use-case-diagram-traceability",
    "title": "Overview",
    "section": "Use Case Diagram Traceability",
    "text": "Use Case Diagram Traceability\n\n\n\nArtifact ID\nArtifact Name\nRequirement ID\n\n\n\n\nCommand Line Interface\nSet Threads\nFR00-FR01, FR08, FR11-FR12\n\n\nCommand Line Interface\nSet Output Name\nFR00, FR03, FR10\n\n\nCommand Line Interface\nSet Input\nFR00, FR04-FR07\n\n\nCommand Line Interface\nSet CpG Locations\nFR00, FR06\n\n\nProcessing\nCheck Valid Region\nFR60-FR61, NFR07\n\n\nProcessing\nStore Coverage\nFR84-FR85\n\n\nProcessing\nFind Locations\nFR65-FR69\n\n\nProcessing\nProcess Read\nFR70-FR85, NFR08-NFR09",
    "crumbs": [
      "Documents",
      "(Final) Software Requirements Specification"
    ]
  },
  {
    "objectID": "docs/software_requirements_specification_final.html#class-diagram-traceability",
    "href": "docs/software_requirements_specification_final.html#class-diagram-traceability",
    "title": "Overview",
    "section": "Class Diagram Traceability",
    "text": "Class Diagram Traceability\n\n\n\nArtifact Name\nRequirement ID\n\n\n\n\ntotal_coverage_t\nFR84-FR85\n\n\ncovg_conf_t\nFR00-FR02, FR08-FR09, FR11-FR14, FR59, NFR13\n\n\nfraction_t\nFR84-FR85\n\n\nmaps_t\nFR84-FR85\n\n\ntarget_t\nFR15-FR18, FR60-FR61\n\n\noutput_names_t\nFR21-FR58",
    "crumbs": [
      "Documents",
      "(Final) Software Requirements Specification"
    ]
  },
  {
    "objectID": "docs/software_requirements_specification_final.html#activity-diagram-traceability",
    "href": "docs/software_requirements_specification_final.html#activity-diagram-traceability",
    "title": "Overview",
    "section": "Activity Diagram Traceability",
    "text": "Activity Diagram Traceability\n\n\n\nArtifact ID\nArtifact Name\nRequirement ID\n\n\n\n\nCommand Line Interface\nRead Next Argument\nFR00\n\n\nCommand Line Interface\nSet Threads\nFR00-FR01, FR08, FR11-FR12\n\n\nCommand Line Interface\nSet Output\nFR00, FR03, FR10\n\n\nCommand Line Interface\nSet Input\nFR00, FR04-FR07\n\n\nCommand Line Interface\nSet Locations\nFR00, FR06\n\n\nProcessing\nGet Positions\nFR15-FR16, FR70-FR83\n\n\nProcessing\nValid Region\nFR15-FR16, FR60-FR61, FR63-FR64\n\n\nProcessing\nRead CIGAR String\nFR15-FR16, FR75-FR85\n\n\nProcessing\nIs Known Operation\nFR15-FR16, FR75-FR85\n\n\nProcessing\nIs Match\nFR15-FR16, FR75-FR85\n\n\nProcessing\nModify Coverage\nFR84-FR85",
    "crumbs": [
      "Documents",
      "(Final) Software Requirements Specification"
    ]
  },
  {
    "objectID": "docs/software_requirements_specification_final.html#artifacts",
    "href": "docs/software_requirements_specification_final.html#artifacts",
    "title": "Overview",
    "section": "Artifacts",
    "text": "Artifacts\n\nSystem Resuest\nUse Case Diagram: Command Line Interface\nUse Case Diagram: Processing\nActivity Diagram: Command Line Interface\nActivity Diagram: Processing\nCRC Card: Command Line Interface\nClass Diagram: Original\nClass Diagram: Complete\nObject Diagram: Original\nObject Diagram: Complete\nSequence Diagram\nState Diagram\nWindow Navigation Diagram",
    "crumbs": [
      "Documents",
      "(Final) Software Requirements Specification"
    ]
  },
  {
    "objectID": "docs/software_requirements_specification_final.html#docs",
    "href": "docs/software_requirements_specification_final.html#docs",
    "title": "Overview",
    "section": "Docs",
    "text": "Docs\n\nProject Proposal\nOriginal Software Requirements Specification\nFinal Software Requirements Specification (this document)\nMidterm Presentation\nFinal Presentation",
    "crumbs": [
      "Documents",
      "(Final) Software Requirements Specification"
    ]
  },
  {
    "objectID": "docs/software_requirements_specification_final.html#meetings",
    "href": "docs/software_requirements_specification_final.html#meetings",
    "title": "Overview",
    "section": "Meetings",
    "text": "Meetings\n\nMeeting Minutes: 30 September 2024\nMeeting Minutes: 07 October 2024\nMeeting Minutes: 14 October 2024\nMeeting Minutes: 23 October 2024\nMeeting Minutes: 28 October 2024\nMeeting Minutes: 04 November 2024\nMeeting Minutes: 11 November 2024\nMeeting Minutes: 18 November 2024\nMeeting Minutes: 25 November 2024\nMeeting Minutes: 02 December 2024",
    "crumbs": [
      "Documents",
      "(Final) Software Requirements Specification"
    ]
  },
  {
    "objectID": "meetings/GVSU-CIS641-PackingTheBits-2024-12-02.html",
    "href": "meetings/GVSU-CIS641-PackingTheBits-2024-12-02.html",
    "title": "WGBS Genome Coverage",
    "section": "",
    "text": "Team name: Packing the Bits\nMembers present: Jacob Morrison\nDate: 02 December 2024\nTime: 13:35\nDiscussion points:\n\nLast meeting!\nGoing to call it on testing for this project\n\nWill need to do more testing for actual implementation in BISCUIT\n\n\nGoals for this week (include responsibilities):\nAll responsibilities handled by Jacob Morrison\n\nFinish up project\n\nPresentation\nMake sure all artifacts align across project (completed)\nComplete change management plan\nTraceability\nMake sure all artifacts are linked\nSpelling/grammar check\nUpdate all READMEs\nUpdate website with all links\nSubmit presentation and project\nSelf reflection",
    "crumbs": [
      "Meetings",
      "2024-12-02"
    ]
  },
  {
    "objectID": "meetings/GVSU-CIS641-PackingTheBits-2024-12-02.html#meeting-minutes",
    "href": "meetings/GVSU-CIS641-PackingTheBits-2024-12-02.html#meeting-minutes",
    "title": "WGBS Genome Coverage",
    "section": "",
    "text": "Team name: Packing the Bits\nMembers present: Jacob Morrison\nDate: 02 December 2024\nTime: 13:35\nDiscussion points:\n\nLast meeting!\nGoing to call it on testing for this project\n\nWill need to do more testing for actual implementation in BISCUIT\n\n\nGoals for this week (include responsibilities):\nAll responsibilities handled by Jacob Morrison\n\nFinish up project\n\nPresentation\nMake sure all artifacts align across project (completed)\nComplete change management plan\nTraceability\nMake sure all artifacts are linked\nSpelling/grammar check\nUpdate all READMEs\nUpdate website with all links\nSubmit presentation and project\nSelf reflection",
    "crumbs": [
      "Meetings",
      "2024-12-02"
    ]
  },
  {
    "objectID": "meetings/GVSU-CIS641-PackingTheBits-2024-11-04.html",
    "href": "meetings/GVSU-CIS641-PackingTheBits-2024-11-04.html",
    "title": "WGBS Genome Coverage",
    "section": "",
    "text": "Team name: Packing the Bits\nMembers present: Jacob Morrison\nDate: 4 November 2024\nTime: 15:45\nDiscussion points:\n\nFinished in-class assignment (IC4)\n\nSequence diagram\nState diagram\n\nNeed to start testing now\n\nGoals for next week (include responsibilities):\nAll responsibilities handled by Jacob Morrison\n\nWork on some testing\n\nTesting will be a basic set of tests\n\nEnsure new implementation is faster than old version\nCheck for differences in output and understand why those arise",
    "crumbs": [
      "Meetings",
      "2024-11-04"
    ]
  },
  {
    "objectID": "meetings/GVSU-CIS641-PackingTheBits-2024-11-04.html#meeting-minutes",
    "href": "meetings/GVSU-CIS641-PackingTheBits-2024-11-04.html#meeting-minutes",
    "title": "WGBS Genome Coverage",
    "section": "",
    "text": "Team name: Packing the Bits\nMembers present: Jacob Morrison\nDate: 4 November 2024\nTime: 15:45\nDiscussion points:\n\nFinished in-class assignment (IC4)\n\nSequence diagram\nState diagram\n\nNeed to start testing now\n\nGoals for next week (include responsibilities):\nAll responsibilities handled by Jacob Morrison\n\nWork on some testing\n\nTesting will be a basic set of tests\n\nEnsure new implementation is faster than old version\nCheck for differences in output and understand why those arise",
    "crumbs": [
      "Meetings",
      "2024-11-04"
    ]
  },
  {
    "objectID": "meetings/GVSU-CIS641-PackingTheBits-2024-10-23.html",
    "href": "meetings/GVSU-CIS641-PackingTheBits-2024-10-23.html",
    "title": "WGBS Genome Coverage",
    "section": "",
    "text": "Team name: Packing the Bits\nMembers present: Jacob Morrison\nDate: 23 October 2024\nTime: 15:50\nDiscussion points:\n\nCRC, Class diagram, and Object diagram completed (IC3)\nContinued working on implementation\n\nHave correct files output now\nStarted comparing against previous implementation\n\nFound an off-by-one bug when looking at specific regions\n\n\n\nGoals for next week (include responsibilities):\nAll responsibilities handled by Jacob Morrison\n\nResolve off-by-one bug for CpG coverage\nImplement reading regions via tabix",
    "crumbs": [
      "Meetings",
      "2024-10-23"
    ]
  },
  {
    "objectID": "meetings/GVSU-CIS641-PackingTheBits-2024-10-23.html#meeting-minutes",
    "href": "meetings/GVSU-CIS641-PackingTheBits-2024-10-23.html#meeting-minutes",
    "title": "WGBS Genome Coverage",
    "section": "",
    "text": "Team name: Packing the Bits\nMembers present: Jacob Morrison\nDate: 23 October 2024\nTime: 15:50\nDiscussion points:\n\nCRC, Class diagram, and Object diagram completed (IC3)\nContinued working on implementation\n\nHave correct files output now\nStarted comparing against previous implementation\n\nFound an off-by-one bug when looking at specific regions\n\n\n\nGoals for next week (include responsibilities):\nAll responsibilities handled by Jacob Morrison\n\nResolve off-by-one bug for CpG coverage\nImplement reading regions via tabix",
    "crumbs": [
      "Meetings",
      "2024-10-23"
    ]
  },
  {
    "objectID": "meetings/GVSU-CIS641-PackingTheBits-2024-10-28.html",
    "href": "meetings/GVSU-CIS641-PackingTheBits-2024-10-28.html",
    "title": "WGBS Genome Coverage",
    "section": "",
    "text": "Team name: Packing the Bits\nMembers present: Jacob Morrison\nDate: 28 October 2024\nTime: 15:55\nDiscussion points:\n\nFinished implementation as I want it to exist for class\n\nGoals for next week (include responsibilities):\nAll responsibilities handled by Jacob Morrison\n\nDo in-class assignment (IC4)\nStart looking into what testing will look like",
    "crumbs": [
      "Meetings",
      "2024-10-28"
    ]
  },
  {
    "objectID": "meetings/GVSU-CIS641-PackingTheBits-2024-10-28.html#meeting-minutes",
    "href": "meetings/GVSU-CIS641-PackingTheBits-2024-10-28.html#meeting-minutes",
    "title": "WGBS Genome Coverage",
    "section": "",
    "text": "Team name: Packing the Bits\nMembers present: Jacob Morrison\nDate: 28 October 2024\nTime: 15:55\nDiscussion points:\n\nFinished implementation as I want it to exist for class\n\nGoals for next week (include responsibilities):\nAll responsibilities handled by Jacob Morrison\n\nDo in-class assignment (IC4)\nStart looking into what testing will look like",
    "crumbs": [
      "Meetings",
      "2024-10-28"
    ]
  },
  {
    "objectID": "meetings/GVSU-CIS641-PackingTheBits-2024-11-18.html",
    "href": "meetings/GVSU-CIS641-PackingTheBits-2024-11-18.html",
    "title": "WGBS Genome Coverage",
    "section": "",
    "text": "Team name: Packing the Bits\nMembers present: Jacob Morrison\nDate: 18 November 2024\nTime: 15:50\nDiscussion points:\n\nThoughts on what I want to do for testing\n\nCreate script to create benchmarking new version against old\n\nCan use to test speed of processing\nCan make sure the new version is faster than the old version (and worth the effort)\n\nCreate test files to check if different options change results or not\n\nIt’s okay if results change, but I need to know how so I can explain to users when this is deployed\n\n\nHomework 5 (class diagrams) started and almost done\n\nGoals for next week (include responsibilities):\nAll responsibilities handled by Jacob Morrison\n\nMust complete a base level of testing to wrap up other elements of project\nFinish HW5 (class diagrams)",
    "crumbs": [
      "Meetings",
      "2024-11-18"
    ]
  },
  {
    "objectID": "meetings/GVSU-CIS641-PackingTheBits-2024-11-18.html#meeting-minutes",
    "href": "meetings/GVSU-CIS641-PackingTheBits-2024-11-18.html#meeting-minutes",
    "title": "WGBS Genome Coverage",
    "section": "",
    "text": "Team name: Packing the Bits\nMembers present: Jacob Morrison\nDate: 18 November 2024\nTime: 15:50\nDiscussion points:\n\nThoughts on what I want to do for testing\n\nCreate script to create benchmarking new version against old\n\nCan use to test speed of processing\nCan make sure the new version is faster than the old version (and worth the effort)\n\nCreate test files to check if different options change results or not\n\nIt’s okay if results change, but I need to know how so I can explain to users when this is deployed\n\n\nHomework 5 (class diagrams) started and almost done\n\nGoals for next week (include responsibilities):\nAll responsibilities handled by Jacob Morrison\n\nMust complete a base level of testing to wrap up other elements of project\nFinish HW5 (class diagrams)",
    "crumbs": [
      "Meetings",
      "2024-11-18"
    ]
  },
  {
    "objectID": "website/docs.html",
    "href": "website/docs.html",
    "title": "Documents",
    "section": "",
    "text": "Collected Project Documents\n\nProject proposal\nSoftware Requirements Specification\nSoftware Requirements Specification (Final Version)\nMidterm Presentation\nFinal Presentation",
    "crumbs": [
      "Documents"
    ]
  },
  {
    "objectID": "website/final_presentation.html",
    "href": "website/final_presentation.html",
    "title": "Final Presentation",
    "section": "",
    "text": "PDFs are difficult to render nicely in browsers, so please download the presentation.",
    "crumbs": [
      "Documents",
      "Final Presentation"
    ]
  },
  {
    "objectID": "website/diagrams.html",
    "href": "website/diagrams.html",
    "title": "Diagrams",
    "section": "",
    "text": "Use Case Diagram 1: Command Line Interface\n\n\n\n\n\nUse Case Diagram 2: Processing",
    "crumbs": [
      "Artifacts",
      "Diagrams (Use Case, Activity)"
    ]
  },
  {
    "objectID": "website/diagrams.html#class-descriptions-and-conditions",
    "href": "website/diagrams.html#class-descriptions-and-conditions",
    "title": "Diagrams",
    "section": "Class Descriptions and Conditions",
    "text": "Class Descriptions and Conditions\n\nC1. covg_conf_t\n\nDescription: Stores non-string command line arguments\ncovg_conf_init Pre/Post Conditions:\n\nPreconditions:\n\nDeclare covg_conf_t variable (initialize to NULL if pointer or without initialization if not a pointer)\n\nPostconditions:\n\nVariable that was passed in to function now has values initialized to default values\n\n\n\nC2: total_coverage_t\n\nDescription: Combines coverage fractions (used for calculating mean and standard deviation of coverage) for all output combinations into a single struct\ninit_total_coverage Pre/Post Conditions:\n\nPreconditions:\n\nDeclare a non-pointer variable of type total_coverage_t\n\nPostconditions:\n\nA total_coverage_t is initialized and set as the value for variable declared in precondition\n\n\n\nC3: maps_t\n\nDescription: Combines all hash maps of coverage (key) and number of bases at that coverage (value) for all output combinations into a single struct\ninit_maps Pre/Post Conditions:\n\nPreconditions:\n\nDeclare pointer of type maps_t\n\nPostconditions:\n\nmaps_t struct is created on heap and variable declared in preconditions is set to the memory address of the created struct\n\n\ndestroy_maps Pre/Post Conditions:\n\nPreconditions:\n\nmaps_t struct must be initialized with init_maps\nHashmaps in maps_t struct may or may not be updated prior to running this function\n\nPostconditions:\n\nMemory allocated for maps_t and the underlying hashmaps is freed and returned to the system for assigning to other objects\n\n\n\nC4: fraction_t\n\nDescription: Stores the numerator and denominator of a fraction as two separate integers within the struct\ninit_fraction Pre/Post Conditions:\n\nPreconditions:\n\nDeclare a non-pointer variable of type fraction_t\n\nPostconditions:\n\nA fraction_t is initialized and set as the value for variable declared in precondition\n\n\ndivide Pre/Post Conditions:\n\nPreconditions:\n\nA fraction_t must be initialized\nden attribute must be non-zero\n\nPostconditions:\n\nA double is returned\n\n\n\nC5: target_t\n\nDescription: Stores information about each chromosome as read from the input file\ncompare_targets Pre/Post Conditions:\n\nPreconditions:\n\nInitialize target_t pointer and fill out at least the name element (preferably all elements)\nInitialize another target_t pointer and fill out at least the name element (preferably all elements)\nUse as a function pointer input to qsort OR be sure to cast your inputs as void* variables due to qsort declaration requirements\n\nPostconditions:\n\nReturns string comparison of name elements in target_t\nReturns 0 if strings are equal\nReturns &gt;0 if first non-matching character of first string is greater than the corresponding character in the second string\nReturns &lt;0 if first non-matching character of first string is less than the corresponding character in the second string\n\n\n\nC6: output_names_t\n\nDescription: Combines names of all output files into a single struct\ninit_output_names Pre/Post Conditions:\n\nPreconditions:\n\nDeclare a pointer of type output_names_t\nCreate character array pointer with prefix for input to function (can be NULL)\n\nPostconditions:\n\noutput_names_t struct is created on heap and variable declared in preconditions is set to the memory address of the created struct\nPrefix input is prepended (along with underscore (“_“)) if prefix is not NULL, otherwise nothing is prepended to default names\n\n\ndestroy_output_names Pre/Post Conditions:\n\nPreconditions:\n\noutput_names_t struct must be initialized with init_output_names\n\nPostconditions:\n\nMemory allocated for output_names_t and the underlying character array pointers is freed and returned to the system for assigning to other objects",
    "crumbs": [
      "Artifacts",
      "Diagrams (Use Case, Activity)"
    ]
  },
  {
    "objectID": "website/midterm_presentation.html",
    "href": "website/midterm_presentation.html",
    "title": "Midterm Presentation",
    "section": "",
    "text": "PDFs are difficult to render nicely in browsers, so please download the presentation.",
    "crumbs": [
      "Documents",
      "Midterm Presentation"
    ]
  }
]